// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: yandex/cloud/operation/operation_service.proto

#include "yandex/cloud/operation/operation_service.pb.h"
#include "yandex/cloud/operation/operation_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace yandex {
namespace cloud {
namespace operation {

static const char* OperationService_method_names[] = {
  "/yandex.cloud.operation.OperationService/Get",
  "/yandex.cloud.operation.OperationService/Cancel",
};

std::unique_ptr< OperationService::Stub> OperationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OperationService::Stub> stub(new OperationService::Stub(channel, options));
  return stub;
}

OperationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(OperationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cancel_(OperationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OperationService::Stub::Get(::grpc::ClientContext* context, const ::yandex::cloud::operation::GetOperationRequest& request, ::yandex::cloud::operation::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::yandex::cloud::operation::GetOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void OperationService::Stub::async::Get(::grpc::ClientContext* context, const ::yandex::cloud::operation::GetOperationRequest* request, ::yandex::cloud::operation::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::yandex::cloud::operation::GetOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void OperationService::Stub::async::Get(::grpc::ClientContext* context, const ::yandex::cloud::operation::GetOperationRequest* request, ::yandex::cloud::operation::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yandex::cloud::operation::Operation>* OperationService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::yandex::cloud::operation::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::yandex::cloud::operation::Operation, ::yandex::cloud::operation::GetOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::yandex::cloud::operation::Operation>* OperationService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::yandex::cloud::operation::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OperationService::Stub::Cancel(::grpc::ClientContext* context, const ::yandex::cloud::operation::CancelOperationRequest& request, ::yandex::cloud::operation::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::yandex::cloud::operation::CancelOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Cancel_, context, request, response);
}

void OperationService::Stub::async::Cancel(::grpc::ClientContext* context, const ::yandex::cloud::operation::CancelOperationRequest* request, ::yandex::cloud::operation::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::yandex::cloud::operation::CancelOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, std::move(f));
}

void OperationService::Stub::async::Cancel(::grpc::ClientContext* context, const ::yandex::cloud::operation::CancelOperationRequest* request, ::yandex::cloud::operation::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yandex::cloud::operation::Operation>* OperationService::Stub::PrepareAsyncCancelRaw(::grpc::ClientContext* context, const ::yandex::cloud::operation::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::yandex::cloud::operation::Operation, ::yandex::cloud::operation::CancelOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Cancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::yandex::cloud::operation::Operation>* OperationService::Stub::AsyncCancelRaw(::grpc::ClientContext* context, const ::yandex::cloud::operation::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

OperationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OperationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OperationService::Service, ::yandex::cloud::operation::GetOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OperationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::yandex::cloud::operation::GetOperationRequest* req,
             ::yandex::cloud::operation::Operation* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OperationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OperationService::Service, ::yandex::cloud::operation::CancelOperationRequest, ::yandex::cloud::operation::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OperationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::yandex::cloud::operation::CancelOperationRequest* req,
             ::yandex::cloud::operation::Operation* resp) {
               return service->Cancel(ctx, req, resp);
             }, this)));
}

OperationService::Service::~Service() {
}

::grpc::Status OperationService::Service::Get(::grpc::ServerContext* context, const ::yandex::cloud::operation::GetOperationRequest* request, ::yandex::cloud::operation::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OperationService::Service::Cancel(::grpc::ServerContext* context, const ::yandex::cloud::operation::CancelOperationRequest* request, ::yandex::cloud::operation::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace yandex
}  // namespace cloud
}  // namespace operation

